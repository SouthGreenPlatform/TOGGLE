#!/usr/bin/perl

###################################################################################################################################
#
# Copyright 2014-2015 IRD-CIRAD-INRA-ADNid
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/> or
# write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.
#
# You should have received a copy of the CeCILL-C license with this program.
#If not see <http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.txt>
#
# Intellectual property belongs to IRD, CIRAD and South Green developpement plateform for all versions also for ADNid for v2 and v3 and INRA for v3
# Version 1 written by Cecile Monat, Ayite Kougbeadjo, Christine Tranchant, Cedric Farcy, Mawusse Agbessi, Maryline Summo, and Francois Sabot
# Version 2 written by Cecile Monat, Christine Tranchant, Cedric Farcy, Enrique Ortega-Abboud, Julie Orjuela-Bouniol, Sebastien Ravel, Souhila Amanzougarene, and Francois Sabot
# Version 3 written by Cecile Monat, Christine Tranchant, Cedric Farcy, Maryline Summo, Julie Orjuela-Bouniol, Sebastien Ravel, Gautier Sarah, and Francois Sabot
#
###################################################################################################################################

use strict;

#Will test if fastxToolkit works correctly
use warnings;
use Test::More 'no_plan'; #Number of tests, to modify if new tests implemented. Can be changed as 'no_plan' instead of tests=>11 .
use Test::Deep;
use lib qw(../Modules/);
use Data::Dumper;

#######################################
#Creating the IndividuSoft.txt file
#######################################
my $creatingCommand="echo \"fastxToolkit\nTEST\" > individuSoft.txt";
system($creatingCommand) and die ("ERROR: $0: Cannot create the individuSoft.txt file with the command $creatingCommand \n$!\n");


#######################################
#Cleaning the logs for the test
#######################################
my $cleaningCommand="rm -Rf fastxToolkit_TEST_log.*";
system($cleaningCommand) and die ("ERROR: $0: Cannot clean the previous log files for this test with the command $cleaningCommand \n$!\n");

########################################
#initialisation and setting configs
########################################
my $testingDir="../DATA-TEST/fastxToolkitTestDir";
my $creatingDirCom="rm -Rf $testingDir ; mkdir -p $testingDir";                                    #Allows to have a working directory for the tests
system($creatingDirCom) and die ("ERROR: $0 : Cannot execute the command $creatingDirCom\n$!\n");

my $OriginalFastq="../DATA/expectedData/RC3_1.fastq";
my $fastq1="$testingDir/RC3_1.fastq";
my $refCopyCom="cp $OriginalFastq $fastq1";
system($refCopyCom) and die ("ERROR: $0 : Cannot copy the fastq file $OriginalFastq with the command $refCopyCom\n$!\n");     #Now we have a ref to be tested

$OriginalFastq="../DATA/expectedData/RC3_2.fastq";
my $fastq2="$testingDir/RC3_2.fastq";
$refCopyCom="cp $OriginalFastq $fastq2";
system($refCopyCom) and die ("ERROR: $0 : Cannot copy the fastq file $OriginalFastq with the command $refCopyCom\n$!\n");     #Now we have a ref to be tested



########################################
#use of module ok
########################################
use_ok('toolbox') or exit;
use_ok('fastxToolkit') or exit;
can_ok( 'fastxToolkit','fastxTrimmer');

use toolbox;
use fastxToolkit;


################################################################################################
#####Test for fastxTrimmer
my %optionsHachees = ("-f" => "8");                             # Hash containing informations
my $optionHachees = \%optionsHachees;                           # Ref of the hash

my $fastq1Trimmed="$testingDir/RC3_1.FASTXTRIMMER.fastq";
is(fastxToolkit::fastxTrimmer($fastq1, $fastq1Trimmed, $optionHachees),1, 'Test for fastxToolkit::fastxTrimmer');

###Verify if files have been correctly generated by fastxTrimmer
my @expectedOutput=('../DATA-TEST/fastxToolkitTestDir/RC3_1.fastq','../DATA-TEST/fastxToolkitTestDir/RC3_1.FASTXTRIMMER.fastq','../DATA-TEST/fastxToolkitTestDir/RC3_2.fastq');
my @outPut=toolbox::readDir($testingDir);

is_deeply(@outPut,\@expectedOutput,'Test for the output files produced by fastxTrimmer');

###Test for correct file value of fastq trimmed file using a md5sum file control
my $expectedMD5sum='f9e6e28015919fab27f24dad62cb7a27';
my $observedMD5sum=`md5sum ../DATA-TEST/fastxToolkitTestDir/RC3_1.FASTXTRIMMER.fastq`;  #md5sum values observed for the current files produced
my @withoutName =split (" ", $observedMD5sum);                                           # to separate the structure and the name of the test file
$observedMD5sum = $withoutName[0];                                                      #just to have the md5sum result
is($observedMD5sum,$expectedMD5sum,'Test for the content of the fastxTrimmer output');


