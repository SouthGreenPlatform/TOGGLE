## Configuration file : to generate BAM files from pair-end fastq files using bwa aln/sampe, after a QC control of intial data
## http://toggle.southgreen.fr


###############################
# 1 - PIPELINE CONFIGURATION
###############################

#------------------------------
#   Building Workflow
#------------------------------
# After the tag $order define steps composing the pipeline and
# their relative order.
# Each line consists of the step number followed by
# an equal symbol then by the software√ïs name (e.g. 1=FastQC).
#
# - All the steps with a number <1000
# are carried out for each sample separately
#
# - All the steps with a number > or = 1000
# are performed as a global analysis 
#
# - Step name is not casse-sensitive
#------------------------------

$order
1=fastqc
2=cutadapt
3=bwaAln
4=bwaSampe
#-----------  sort sam
5=picardToolsSortSam
#-----------  get some mapping statistics
6=samtoolsflagstat
#-----------  extracting correctly mapped read
7=samtoolsview
8=samToolsIndex
9=gatkRealignerTargetCreator
10=gatkIndelRealigner
11=picardToolsMarkDuplicates
1000=gatkHaplotypeCaller
#----------- Filtering step - see gatkVariantFiltration parameters 
1001=gatkVariantFiltration
#----------- SNP selection  
1002=gatkSelectVariants



#------------------------------
#   Providing software parameters
#------------------------------
# Foreach software, parameters can be provided after the line
# composed of the symbol $ followed by the software name 
#
# - If no software parameter provided, the default ones are
# used.
# - TOGGLe will handle itself the input and output files as
# well as the references.
# - see software manual for more details about 
#------------------------------

$cutadapt
-O=10
-m=35
-q=20,20
--overlap=7
# Adaptator1 is removed in the forward (-b) and reverse (-B) reads (5' and 3' position)
-b ADAPTATOR1REVERSE -B ADAPTATOR1REVERSE
# Same traitement is done for the forward adaptator sequence
-b ADAPTATOR1FORWARD -B ADAPTATOR1FORWARD

$bwa aln
-n=5

$bwa sampe
-a 500

$picardToolsSortSam
SORT_ORDER=coordinate
VALIDATION_STRINGENCY=SILENT
CREATE_INDEX=TRUE

$samToolsView
-h
-b
-f=0x02

$gatkRealignerTargetCreator
-T=RealignerTargetCreator

$gatkIndelRealigner
-T=IndelRealigner

$picardToolsMarkDuplicates
VALIDATION_STRINGENCY=SILENT
CREATE_INDEX=TRUE
REMOVE_DUPLICATES=TRUE

$gatkHaplotypeCaller
-T=HaplotypeCaller
-rf BadCigar

$gatkVariantFiltration
-T=VariantFiltration
--filterName 'FILTER-DP' --filterExpression 'DP<10 || DP>600' --filterName 'LowQual' --filterExpression 'QUAL<30'

$gatkSelectVariants
-T=SelectVariants
-selectType=SNP


###############################
# 2 - DATA MANAGEMENT
###############################

#------------------------------
#   Removing intermediate data
#------------------------------
# users can specify after the tag $cleaner,
# the list of step number (one by line)
#------------------------------

$cleaner
#put the step number that TOGGLe have to manage data 
3
4
9

#------------------------------
#   Compressing data
#------------------------------
# users can specify after the tag $compress,
# the list of step number (one by line) that data have to be compressed
#------------------------------
#$compress


#------------------------------
#   Transferring data from project directory to work directory
#------------------------------
# users can specify after the tag $scp,
# the directory name where the data have to be copied (by scp)
#------------------------------
#$scp
#/scratch




###############################
# 3 - CLUSTER CONFIGURATION
###############################

#------------------------------
#   Setting up jobs scheduler
#------------------------------
#  TOGGLe can run with either LSF, MPRUN, SLURM or SGE
#  jobs schedulers. 
#  - According to the scheduler, after the tag $LSF or $MPRUN or $SLURM or $SGE
#  set scheduler options list
#------------------------------
#Example for SGE
#$sge
#-q YOURQUEUE.q
#-b Y


#------------------------------
#   Providing a specific environment variables
#------------------------------
#  User can specify ENVIRONMENT variables in their jobs (e.g. export or module load)
# using tag $env
#------------------------------
#$env
