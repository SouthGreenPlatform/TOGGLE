
##########################################
# Block for Trinity
##########################################

#Correct variable populating

my $hashOfPairs = pairing::pairRecognition($previousDir, $checkFastq);
#my @listOfSequences = keys %{$hashOfPairs}; #Pick up the names of first sequences (key values of the reference)
my ($paired,$single)=(-1,-1);
my $firstListOfFastq=();
my $secondListOfFastq=();
foreach my $couple (keys %{$hashOfPairs})		# for each pair
{
    ###DEBUG toolbox::exportLog("<<<<<<<<<<<<<<<<<<< DEBUG<<<<<<<<<<<<<<< je rentre dans foreach\n",1);
    if ($couple=~ /^@/)		# Allows to parse only for a FASTQ file		 
    {
        #Extract infos
        if (exists $hashOfPairs->{$couple}{"forward"} and exists $hashOfPairs->{$couple}{"reverse"})
        {
            ###DEBUG toolbox::exportLog("<<<<<<<<<<<<<<<<<<< DEBUG<<<<<<<<<<<<<<< je parse ".$hashOfPairs->{$couple}."\n",1);
            $paired = 1 ;
        }
        elsif (exists $hashOfPairs->{$couple}{"forward"} and !exists $hashOfPairs->{$couple}{"reverse"})
        {
            ###DEBUG toolbox::exportLog("<<<<<<<<<<<<<<<<<<< DEBUG<<<<<<<<<<<<<<< je parse ".$hashOfPairs->{$couple}."\n",1);
            $single=1;
        }
        else
        {
            toolbox::exportLog("<<<<<<<<<<<<<<<<<<< DEBUG<<<<<<<<<<<<<<< couple inconnue: ".$hashOfPairs->{$couple}."\n",1);
        }
    }
}
###DEBUG toolbox::exportLog("<<<<<<<<<<<<<<<<<<< DEBUG<<<<<<<<<<<<<<< single=$single paired= $paired\n",1);
if ($single==1 and $paired==1) # if there are single and paired files together we STOP. BUT NOT FUNCTIONNAL YET, MUST BE MANAGED IN STEP 1000 (MULTIPLE)
{
    toolbox::exportLog("ERROR : $0 : single and paired files can't be assembled together by Trinity.\n",0);
}
if ($paired==1) # only paired
{
    foreach my $couple (keys %{$hashOfPairs})		# for each pair
    {
        push(@{$firstListOfFastq}, $hashOfPairs->{$couple}{"forward"});
        push(@{$secondListOfFastq}, $hashOfPairs->{$couple}{"reverse"});
    }
    ###DEBUG toolbox::exportLog("<<<<<<<<<<<<<<<<<<< DEBUG<<<<<<<<<<<<<<< mode pairÃ©\n",1);
}
elsif ($single==1) # only single
{
    foreach my $couple (keys %{$hashOfPairs})		# for each pair
    {
        push(@{$firstListOfFastq}, $hashOfPairs->{$couple}{"forward"});
    }
    $secondListOfFastq=();
    ###DEBUG toolbox::exportLog("<<<<<<<<<<<<<<<<<<< DEBUG<<<<<<<<<<<<<<< mode single\n",1);
}
##DEBUG toolbox::exportLog("<<<<<<<<<<<<<<<<<<< DEBUG<<<<<<<<<<<<<<< : first list files: ".Dumper(@{$firstListOfFastq})."\nsecond list files: ".Dumper(@{$secondListOfFastq})."\n Paired recognition ". Dumper($listofPairedFile)."\n",1);
$softParameters = toolbox::extractHashSoft($optionRef,$stepName);     # recovery of specific parameters of samtools view pair

#my $name="final-Trinity.fasta";

trinity::trinityRun($newDir,$readGroup,$firstListOfFastq,$secondListOfFastq,$softParameters);
