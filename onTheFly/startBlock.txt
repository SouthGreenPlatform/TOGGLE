#!/usr/bin/env perl

###################################################################################################################################
#
# This pipeline was automatically generated by TOGGLEv3 onTheFly version.
#
##################################################################################################################################

###################################################################################################################################
#
# Copyright 2014-2015 IRD-CIRAD-INRA-ADNid
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/> or
# write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.
#
# You should have received a copy of the CeCILL-C license with this program.
#If not see <http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.txt>
#
# Intellectual property belongs to IRD, CIRAD and South Green developpement plateform for all versions also for ADNid for v2 and v3 and INRA for v3
# Version 1 written by Cecile Monat, Ayite Kougbeadjo, Christine Tranchant, Cedric Farcy, Mawusse Agbessi, Maryline Summo, and Francois Sabot
# Version 2 written by Cecile Monat, Christine Tranchant, Cedric Farcy, Enrique Ortega-Abboud, Julie Orjuela-Bouniol, Sebastien Ravel, Souhila Amanzougarene, and Francois Sabot
# Version 3 written by Cecile Monat, Christine Tranchant, Cedric Farcy, Maryline Summo, Julie Orjuela-Bouniol, Sebastien Ravel, Gautier Sarah, and Francois Sabot
#
###################################################################################################################################




use strict;
use warnings;
use localConfig;
use Data::Dumper;
use Switch;


use bwa;
use cutadapt;
use fastqc;
use fastqUtils;
use gatk;
use pairing;
use picardTools;
use samTools;
use toolbox;
use onTheFly;
use tophat;
use HTSeq;

#TO BE COMPLETED

##########################################
# recovery of parameters/arguments given when the program is executed
##########################################
my $cmd_line=$0." @ARGV";
my ($nomprog)=$0=~/([^\/]+)$/;
unless ($#ARGV>=0)                                                                                          # if no argument given
{
  print <<"Mesg";
  Usage: toggleGenerator.pl -d dataFolder -r referenceFile -c configurationFile [-g gffFile]

  perldoc $nomprog display the complete help
Mesg

  exit;
}

my %param = @ARGV;                                                                                          # get the parameters
@param{ map { lc $_ } keys %param } = values %param;
if (not defined($param{'-d'}) or not defined($param{'-c'}) or not defined($param{'-r'}))
{
  print <<"Mesg";
  ERROR: Parameters -d, -r and -c are mandatory.
  the -g parameter is required for some analyses, such as for TopHat or snpEff.

  perldoc $nomprog display complete the help
Mesg
  exit;
}


##########################################
# recovery of initial informations/files
##########################################
my $initialDir = $param{'-d'};               # recovery of the name of the directory to analyse
my $fileConf = $param{'-c'};                 # recovery of the name of the software.configuration.txt file
my $refFastaFile = $param{'-r'};             # recovery of the reference file
my $gffFile;                                  # recovery of the gff file used by topHat and rnaseq analysis
$gffFile = $param{'-g'} if (defined $param{'-g'});

toolbox::existsDir($initialDir);        # check if this directory exists


##########################################
# Creation of IndividuSoft.txt for creation of logs files later
##########################################
my @pathIndividu = toolbox::extractPath($initialDir);
my $readGroup = $pathIndividu[0];
if ($0 =~ m/toggleMultiple/)
{
  #The script will be running for a globalAnalysis thus we must change the readGroup value
  $readGroup = "multipleAnalysis";
}
chdir "$initialDir";
my $infosFile = "individuSoft.txt";
open (F1, ">",$infosFile) or die ("ERROR: $0 : Cannot open the file $infosFile\n$!\n");
print F1 "$readGroup\n";
print F1 "global\n";


toolbox::exportLog("#########################################\nINFOS: TOGGLE analysis start \n#########################################\n",1);
toolbox::exportLog("INFOS: Initial command line : $cmd_line\n",1);

toolbox::checkFile($fileConf);                                                                              # check if this file exists
toolbox::checkFile($refFastaFile);                                                                          # check if the reference file exists


my $initialFileList = toolbox::readDir($initialDir);

#Reorganizing initial files
my $previousDir = $initialDir."/0_initialFiles";
toolbox::makeDir($previousDir);

foreach my $currentFile (@$initialFileList)
{
  my ($basicName) = toolbox::extractPath($currentFile);
  next if ($basicName =~ m/individuSoft|log\.[e|o]|Global_log$/); # Passing the individuSoft file
  my $mvCommand = "mv ".$currentFile." ".$previousDir."/".$basicName;
  toolbox::run($mvCommand,"noprint");
}

my $optionRef=toolbox::readFileConf($fileConf); # Picking up the global options

my $hashOrder=toolbox::extractHashSoft($optionRef,"order"); #Picking up the options for the order of the pipeline

#Global variables declaration

##FASTQ associated variables
my ($fastqForwardIn, $fastqForwardOut, $fastqReverseIn, $fastqReverseOut)=("NA","NA","NA","NA");

##SAM associated variables
my ($samFileIn, $samFileOut)=("NA","NA"); #Those variables are to be used for sam standard but also if the block can treat SAM as well as BAM (eg samtools view)
## SAI associated variables
my ($saiForwardOut, $saiReverseOut)=("NA","NA"); # Use for bwa alnBlock, bwaSampe and bwaSamse

##BAM associated variables
my ($bamFileIn, $bamFileOut)=("NA","NA");
my $listOfBam=();

##VCF associated variables
my ($vcfFileIn,$vcfFileOut)=("NA","NA");

##Intervals/Report associated variables
my ($intervalsFile,$tableReport,$vcfSnpKnownFile);

##MpileUp associated variables
my ($mpileupOut);

##Internal variables
###Directory and file variables
my ($newDir, $fileWithoutExtension, $extension, $shortDirName, @dirList);
### Step variables
my ($stepF1, $stepOrder, $stepName, $softParameters);
### Various command variables
my ($cleanerCommand, $compressorCommand,$replacementCommand);

my $fileList=toolbox::readDir($previousDir);
my $globalAnalysis=0; #to check if all data are to be treated one by one  (0) or in group (1)

if ($$fileList[0] !~ m/fastq|fq|fastq\.gz|fq\.gz|sam|bam|vcf|bai|vcf\.gz$/)
{
  toolbox::exportLog("ERROR: The input files are not in a format usable by TOGGLE",0); # Not the good formats
}

if (scalar @$fileList >=2 && $$fileList[0] =~ m/sam|bam|vcf|bai|vcf\.gz$/)
{
  $globalAnalysis=1;
}


foreach my $position (sort {$a <=>$b} keys %{$hashOrder})
{
  if ($globalAnalysis == 0)
  {
    last if ($position >= 1000);
    my $directory = $initialDir."/".$position."_".$$hashOrder{$position};
    $directory =~ s/ //g; #Removing the spaces
    toolbox::makeDir($directory); # Create the folder associated with each steps
    push (@dirList,$directory); # Adding the newly created folder to the list of folders
  }
  else
  {
    next if ($position < 1000);
    my $directory = $initialDir."/".$position."_".$$hashOrder{$position};
    $directory =~ s/ /_/g; #Removing the spaces
    toolbox::makeDir($directory); # Create the folder associated with each steps
    push (@dirList,$directory); # Adding the newly created folder to the list of folders
    
  }
}
