##########################################
# Block for gatk::gatkRealignerTargetCreator
##########################################

#########################################
# GATK REALIGNER TARGET CREATOR
#########################################

#Correct variable populating
foreach my $file (@{$fileList}) #Checking the type of files that must be SAM or BAM
{
    if ($file =~ m/bam$/) # the file type is normally bam
    {
        if ($bamFileIn ne "NA") # Already a bam recognized, but more than one in the previous folder
        {
            toolbox::exportLog("ERROR : $0 : there are more than one single BAM file at $stepName step.\n",0);
        }
        else
        {
            $bamFileIn = $file;
        }
    }
}

if ($bamFileIn eq "NA") #No BAM file found in the previous folder
{
    toolbox::exportLog("ERROR : $0 : No BAM file found in $previousDir at step $stepName.\n",0);
}

$softParameters = toolbox::extractHashSoft($optionRef,$stepName);                                       # recovery of specific parameters of GATK Realigner Target Creator
$intervalsFile = "$newDir"."/".$readGroup.".GATKREALIGNERTARGETCREATOR.intervals";      # name for the output file of gatk realigner target creator
gatk::gatkRealignerTargetCreator($refFastaFile, $bamFileIn, $intervalsFile, $softParameters);          # determine (small) suspicious intervals which are likely in need of realignment

#########################################
# Add a symbolic link to bamFiles, to avoid empty bam files for gatkIndelRealigner step
#########################################
my $lnGatkRTCCommand = "ln -s $bamFileIn $newDir/";
toolbox::run($lnGatkRTCCommand ,"noprint");

my @baiFileIn=split /.bam/, $bamFileIn;
$lnGatkRTCCommand = "ln -s $baiFileIn[0]*bai $newDir/";
toolbox::run($lnGatkRTCCommand ,"noprint");
